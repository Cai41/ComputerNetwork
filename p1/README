1. To run the program:
$ make
$ ./client <-p port> <-s> [hostname] [NEU ID]

2. High level approach:
First we read all the arguments, and then create the socket and connect to host
according to the arguments, send and receive all the messages according to protocol.
If any of the above procedures fails, the program print the exception, close the
socket and return.

3. Challenges:
1). Parsing arguments and creating the socket according to the arguments. Some
arguments have default values, some don't, which results in various combinations.
2). Making SSL connections. Using wrong ssl version and ciphers would lead to
handshake failure.

4. Test:
We tested the program with all different combinations of arguments: whether using 
SSL, whether specifying port number, wrong hostname, wrong neuid, etc.
