METHODOLOGY:

Tools we will be using are 
- NS-2 simulation, 
- tcl conduct simulation,
- and Python, analyze trace and plot graphs


         N1                      N4
           \                    /
            \                  /
             N2--------------N3
            /                  \
           /                    \
         N5                      N6

Experiment 1:

CBR source at N2 and sink at N3, one single TCP stream from N1 to N4.

Repeat the experiment for CBR from 1 to 10 Mbps and for TCP variants Tahoe, Reno,
NewReno and Vegas.

For each CBR and TCP variant, run the experiment 100 times and take the average
after computing throughput, latency and droprate by using Python to analyze the
trace of NS2.


Experiment 2:

CBR source at N2 and sink at N3, one TCP stream from N1 to N4 using one TCP
variant and another TCP stream from N5 to N6 using another TCP variant.

For each pair of TCP variants(one of Reno/Reno, NewReno/Reno, Vegas/Vegas,
NewReno/Vegas), run the experiment for CBR from 1 to 10Mbps.

Compute throughput, latency and droprate by using Python to analyze the
trace of NS2 and plot average for runs of the same configuration.



Experiment 3:
For each queueing algorithm DropTail and RED:
Use TCP Reno and SACK to create two TCP flows N1 to N4 and N5 to N6, after 5 seconds,
introduce CBR from N2 to N3. Repeat the experiment for different CBR bandwidths.


Compute throughput, latency and droprate by using Python to analyze the
trace of NS2 and plot average for runs of the same configuration.


