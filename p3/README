METHODOLOGY:

Tools we will be using are 
- NS-2: simulation, which runs the experiment with given configuration, and
  output a trace file that we can analyse packets transmission.
- tcl: conduct simulation,
- and Python, analyze trace and plot graphs


         N1                      N4
           \                    /
            \                  /
             N2--------------N3
            /                  \
           /                    \
         N5                      N6

Experiment 1:

CBR source at N2 and sink at N3, one single TCP stream from N1 to N4.

Do experiments for each combination of the following:
- CBR from 1 to 10 Mbps 
- TCP variants Tahoe, Reno, NewReno and Vegas.
- different delay of each link
- different random seed
- different probability of lossing packet on the link

For each setup, run the experiment 100 times and take the average
after computing throughput, latency and droprate by using Python to analyze the
trace of NS2. Observe the different behaviour of each protocol under same
circumstances, and whether the packet size/delay/random seed would
influence their behaviours. If delay of each link has obvious effect on the result,
fast re-transmission may be the reason. If different error probability on
the link has an effect, so selective ack might be the reason.


Experiment 2:

CBR source at N2 and sink at N3, one TCP stream from N1 to N4 using one TCP
variant and another TCP stream from N5 to N6 using another TCP variant.

Do experiments for each combination of the following:
- Each pair of TCP variants(one of Reno/Reno, NewReno/Reno, Vegas/Vegas,
NewReno/Vegas), 
- CBR from 1 to 10Mbps.
- different start time
- different random seed

Compute throughput, latency and droprate by using Python to analyze the
trace of NS2 and plot average for runs of the same configuration. If the results
vary under different start time, it should be that AIMD algorithm is effecting on fairness.


Experiment 3:

For each queueing algorithm DropTail and RED:

Use TCP Reno and SACK to create two TCP flows N1 to N4 and N5 to N6, after 1-5 
seconds, introduce CBR from N2 to N3. Repeat the experiment for different CBR 
bandwidths.

Compute throughput, latency and droprate by using Python to analyze the
trace of NS2 and plot average for runs of the same configuration.


Other details:

throughput computation: (received packets * packet size) / duration

latency: sum of trip time of all packets / number of packets received

droprate: (sent packets - received packets) / sent packets
